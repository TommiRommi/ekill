#!/bin/bash
procnum=0
nocolor="\033[0m"
opsel=$(echo -e "$1" | cut -c 1)
killdef=-9 ; spectext=killed ; version="0.6.5"
dir=$HOME

help_text () {
while IFS= read -r line; do
  printf "%s\n" "$line"
done <<-Þ
usage: ${0##*/} [options|-kmuhv] (-*) (name of process)
or:    ${0##*/} [configuration] [true/false]
OPTIONS:
  (-k | --kill)
      ${0##*/} -k|--kill [kill signal -* (optional)] [name of process]
      this allows you to kill a process just by typing in it's name.
      you can also choose to send a custom kill signal as the default one is -9
  (-m | --make-list)
      ${0##*/} -m|--make-list [make|list|clear|cam]
      this allows you to make a custom list of process names that will be saved in a log file
      you can then run -u|--use-list to kill all of the processes on the list
  (-u | --use-list)
      ${0##*/} -u|--use-list
      this is a extention of the make list command that allows you to kill all of the processes
      listed in the log file
  (-h | --help)
      ${0##*/} -h|--help
      this displays this help message
  (-v | --version)
      ${0##*/} -v|--version
      this displays the version of the script
CONFIGURATION:
  ${0##*/} root-lock [true/false]
      this prevents you from killing root prcesses if true. This option is on true as default
  ${0##*/} auto-root [true/false]
      this prevents of from using the script unless root is on, if true.
      This option is false as default
  ${0##*/} kill-message [true|false]
      this disables the message shown when a process is killed if true.
      This option is true as default
  ${0##*/} clear-logfile
      this clears the logfile if f.e. a bug occurs
SHORTCUTS
    <+s|+stop> stops the script
    <+e|+expand> expands the options
    <+a|+all> list all processes
Þ
}

default () {
  if [ $# = 0 ]; then
    read -p "type in the process to be listed : " find
    if [[ $find = +s || $find = +stop ]]; then
      exit 0
    elif [[ $find = +a || $find = +all ]]; then
      all="$(ps -A)"
      echo -e "\033[1;33m${all}$nocolor"
    elif [[ -z ${find//[[:blank:]]/} ]]; then
      echo -e "\033[1;31merror, blank space detected\nenter in the process again.$nocolor"; default
    fi
    for multi in {a..c}; do
      case $multi in
        a) ;;
        b) find=$(echo ${find^});;
        c) find=$(echo ${find^^});;
      esac
        list="$(echo $(ps -e | grep "$find") | cut -d ' ' -f4,8,12,16,20,24,28,32,36,40,44,48,52,56,60)"
        for inft in $list; do
          echo -e "\033[1;33m$inft"
        done
    done
        process_select
  fi
}

process_select () {
  echo -e -n "$nocolor"; read -p "type in the process to be $spectext : " proc
  if [[ $proc = +s || $proc = +stop ]]; then
    exit 0
  elif [[ $proc = +e || $proc = +expand ]]; then
    echo -e "\033[1;36mto signal a process to be killed [k]|[kill]\nto signal a request to terminate process [t]|[terminate]\nto signal to process to be stopped [s]|[stop]\nto signal a process to be resumed [r]|[resume]\nto signal a buged process [e]|[error]$nocolor"
    read -p "type in you're option : " sigopt
    case $sigopt in
      k | kill) killdef=-9 ; spectext=killed;;
      t | terminate) killdef=-15 ; spectext=terminated;;
      s | stop) killdef=-19 ; spectext=stopped;;
      r | resume) killdef=-18 ; spectext=resumed;;
      e | error) killdef=-4 ; spectext=stopped;;
      +s | +stop) exit 0;;
      *) echo -e "\033[1;31minvaild option$nocolor";;
    esac
    process_select
  elif [[ -z ${proc//[[:blank:]]/} ]]; then
    echo -e "\033[1;31mERROR, blank space detected\nenter in the process again.$nocolor"; process_select
  else
    kill_1
  fi
}

kill_1 () {
for proc in $proc; do
  p1=$(echo $(ps -C $proc 2>/dev/null | grep "$proc") | cut -d ' ' -f1)
  if [[ $(ps -o uid= -p "$p1" 2>/dev/null | tr -d '[:space:]') = 0 && $(sed -n 1p $dir/.ekill.log) = true ]]; then
    echo -e "\033[1;31mWARNING, you are attempting kill a root process\nto kill a root process type \033[1;32m${0##*/} root-lock false\033[1;31m to disable root lock."; exit 2
  elif [[ $(ps -o uid= -p "$p1" 2>/dev/null | tr -d '[:space:]') = 0 && $USER != root ]]; then
    echo -e "\033[1;31mERROR, to kill a root process you need to give the command root privileges"; exit 2
  elif [[ $killdef = "-19" || $killdef = "-18" ]]; then
    stop_resume
  fi; procnum=0
  while [[ -n ${p1//[[:blank:]]/} ]]; do
    kill $killdef $p1 2>/dev/null; ((procnum++))
    if [[ $(sed -n 3p $dir/.ekill.log) = true ]]; then
      echo -e "\033[1;32m${procnum}: processes succsessfuly $spectext\t($proc) PID $p1 $nocolor"
    fi
    p1=$(echo $(ps -C $proc 2>/dev/null | grep "$proc") | cut -d ' ' -f1)
  done
    if [[ $procnum = 0 && $(sed -n 3p $dir/.ekill.log) = true ]]; then
      echo -e "\033[1;34mprocesses "$proc" not detected$nocolor"
    fi
done
  exit 0
}

stop_resume () {
  for p1 in $(pidof $proc); do
 	  kill $killdef $p1 2>/dev/null && ((procnum++))
  	if [ $procnum -gt 1 ]; then
    	echo -e "\033[1;32m${procnum}: processes succsessfuly $spectext\t($proc) PID $p1 $nocolor";
  	fi
  done
  if [ $procnum = 0 ]; then
    echo -e "\033[1;34mno processes where detected$nocolor" ; exit 1
  fi
    exit 0
}

make_list () {
  read -p "~$ " makelist
  if [[ $makelist = +s || $makelist = +stop ]]; then
    exit 0
  elif [[ -z ${makelist//[[:blank:]]/} ]]; then
    echo -e "\033[1;31mblank space is not valid$nocolor"; make_list
  fi
    printf "%s " "$makelist" >> $dir/.ekill.log; make_list
}

if ! [[ -s $dir/.ekill.log ]]; then
  printf "true\nfalse\ntrue\n" | tee -i $dir/.ekill.log >/dev/null
fi

while [[ $1 != "" && $opsel = "-" ]]; do
  case $1 in
    -k | --kill )
      shift
      if [[ $(echo -e "$1" | cut -c 1) = "-" ]]; then
        killdef="$1" && shift; proc=$1
      else
        proc=$1
      fi
      if [[ -z ${proc//[[:blank:]]/} ]]; then
        echo -e "\033[1;31m${0##*/} -k needs two opirations\n${0##*/} -k (name of process)$nocolor"; exit 1
      fi
      kill_1; exit 0;;
    -m | --make-list )
        echo -e "\033[1;34mwelcome to the make list menu\nchoose one of the following\n\033[1;33m[m|make] [c|clear] [l|list] (cam)$nocolor"
        read -p "~$ " hmm
        case $hmm in
          m | make) echo -e "\033[1;34mmake a list$nocolor"; make_list;;
          c | clear) sed -i '4s/^.*$//' $dir/.ekill.log && echo -e "\033[1;34mcleared the list$nocolor"; exit 0;;
          l | list)
            for list in $(sed -n 4p $dir/.ekill.log); do
              echo -e "\033[1;33m${list}$nocolor"
            done
              exit 0;;
          cam) sed -i '4s/^.*$//' $dir/.ekill.log && echo -e "\033[1;34mmake a list$nocolor"; make_list;;
          +s | +stop) exit 0;;
          *) echo -e "\033[1;31minvaild option selected"; exit 1;;
        esac;;
    -u | --use-list )
      proc="$(sed -n 4p $dir/.ekill.log)"
      kill_1; exit 0;;
    -h | --help )
      help_text; exit 0;;
    -v | --version )
      echo "$version"; exit 0;;
    *)
      echo -e "\033[1;31minvalid option selected\033[32;1m\n${0##*/} -[kh]$nocolor"; exit 1;;
  esac
    shift
done

while [[ $1 != "" && $opsel != "-" ]]; do
  case $1 in
    root-lock)
      shift
      case $1 in
        true) sed -i '1s/^.*$/true/' $dir/.ekill.log; exit 0;;
        false) sed -i '1s/^.*$/false/' $dir/.ekill.log; exit 0;;
        *) echo -e "\033[1;31minvalid option selected\n${0##*/} root-lock true|false$nocolor"; exit 1;;
      esac;;
    auto-root)
      shift
      case $1 in
        true) sed -i '2s/^.*$/true/' $dir/.ekill.log; exit 0;;
        false) sed -i '2s/^.*$/false/' $dir/.ekill.log; exit 0;;
        *) echo -e "\033[1;31minvalid option selected\n${0##*/} auto-root true|false$nocolor"; exit 1;;
      esac;;
    kill-message)
      shift
      case $1 in
        true) sed -i '3s/^.*$/true/' $dir/.ekill.log; exit 0;;
        false) sed -i '3s/^.*$/false/' $dir/.ekill.log; exit 0;;
        *) echo -e "\033[1;31minvalid option selected\n${0##*/} kill-message true|false$nocolor"; exit 1;;
      esac;;
    clear-logfile)
      printf "true\nfalse\ntrue\n" | tee -i $dir/.ekill.log >/dev/null; exit 0;;
    *)
      echo -e "\033[1;31minvalid option selected\n\033[1;32m${0##*/} -s (option) true|false$nocolor"; exit 1;;
  esac
    shift
done

if [[ $(sed -n 2p $dir/.ekill.log) = true && $USER != root ]]; then
  echo -e "\033[1;34myou have auto-root as \033[1;32mtrue\033[1;34m\nand are required to use this program as root$nocolor"; exit 1
fi

default
